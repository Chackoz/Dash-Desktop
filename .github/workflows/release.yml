name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    env:
      SKIP_PREFLIGHT_CHECK: true
      NEXT_TELEMETRY_DISABLED: 1
      CI: true  # Ensures builds complete without signing if credentials aren't available

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug - Check Secrets Availability
        run: |
          echo "Checking if secrets are set (will show as '***' if set):"
          echo "FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY != '' }}"
          echo "FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN != '' }}"
          echo "FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID != '' }}"
          echo "APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE != '' }}"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install gtk+3 librsvg

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install frontend dependencies
        run: |
          npm install
          npm install -D @tauri-apps/cli

      - name: Build Next.js
        run: npm run build
        env:
          CI: true
          NODE_ENV: production
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
          NEXT_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}

      # Prepare macOS signing certificates if available
      - name: Import macOS certificates if available
        if: matrix.platform == 'macos-latest' && secrets.APPLE_CERTIFICATE != ''
        run: |
          echo "Certificates are available, preparing for signed build"
          echo ${{ secrets.APPLE_CERTIFICATE }} | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P ${{ secrets.APPLE_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          rm certificate.p12
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      # Build Tauri with conditional signing for macOS
      - name: Build Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          CI: true
          # macOS signing variables (only applied if they exist)
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # Firebase variables
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
          NEXT_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.NEXT_PUBLIC_FIREBASE_DATABASE_URL }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Dash Desktop ${{ github.ref_name }}"
          releaseBody: |
            ## Dash Desktop ${{ github.ref_name }}

            ðŸš€ Latest Release

            ### Features
            - Cross-platform desktop application
            - Real-time Firebase integration
            - Task management system
            - Network node status monitoring

            ### Download Options
            Choose the appropriate version for your operating system:
            - Windows: `.msi` installer
            - macOS: `.dmg` installer (Note: macOS may show security warnings for unsigned builds)
            - Linux: `.deb` package and `.AppImage`

            ### System Requirements
            - Windows 10 or later
            - macOS 10.15 or later
            - Arch Linux (latest updates)

            ### Installation
            1. Download the appropriate file for your OS
            2. Run the installer
            3. Follow the on-screen instructions

            ### macOS Installation Notes
            If you encounter a security warning on macOS:
            1. Right-click (or Control+click) on the app in Finder
            2. Select "Open" from the context menu
            3. Click "Open" when prompted to confirm

            ### Known Issues
            - Please report any issues on the GitHub repository

            ### Support
            If you encounter any problems, please open an issue on GitHub.

            ---
            ðŸ”„ Release Date: ${{ github.event.release.published_at }}
            ðŸ‘¤ Build Triggered By: ${{ github.actor }}
          releaseDraft: false
          prerelease: false