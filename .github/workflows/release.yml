name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    
    env:
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
      NEXT_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
      SKIP_PREFLIGHT_CHECK: true
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
           sudo apt-get update
           sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev

      - name: Install dependencies (mac only)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install gtk+3 librsvg

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install frontend dependencies
        run: |
          npm install
          npm install -D @tauri-apps/cli

      # Create next.config.js dynamically
      - name: Create Next.js config
        run: |
          echo 'const nextConfig = {
            output: "export",
            images: { unoptimized: true },
            experimental: { appDir: true }
          };
          module.exports = nextConfig;' > next.config.js

      - name: Build Next.js
        run: npm run build
        env:
          CI: true
          NODE_ENV: production

      - name: Generate Release Notes
        id: release_notes
        run: |
            # Get all commits since last tag
            COMMITS=$(git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"%s")
            
            # Initialize categories
            FEATURES=""
            FIXES=""
            PERFORMANCE=""
            
            # Parse commits and categorize
            while IFS= read -r commit; do
              if [[ $commit == feat* ]]; then
                FEATURES="$FEATURES* ${commit#feat*: }\n"
              elif [[ $commit == fix* ]]; then
                FIXES="$FIXES* ${commit#fix*: }\n"
              elif [[ $commit == perf* ]]; then
                PERFORMANCE="$PERFORMANCE* ${commit#perf*: }\n"
              fi
            done <<< "$COMMITS"
            
            # Create release notes
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "# ${{ github.ref_name }}" >> $GITHUB_ENV
            echo "\`${{ github.sha }}\`" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            
            if [ ! -z "$FEATURES" ]; then
              echo "## New Features" >> $GITHUB_ENV
              echo -e "$FEATURES" >> $GITHUB_ENV
            fi
            
            if [ ! -z "$FIXES" ]; then
              echo "## Bug Fixes" >> $GITHUB_ENV
              echo -e "$FIXES" >> $GITHUB_ENV
            fi
            
            if [ ! -z "$PERFORMANCE" ]; then
              echo "## Performance" >> $GITHUB_ENV
              echo -e "$PERFORMANCE" >> $GITHUB_ENV
            fi
            
            echo "" >> $GITHUB_ENV
            echo "## Installation" >> $GITHUB_ENV
            echo "Download the appropriate version for your operating system:" >> $GITHUB_ENV
            echo "- Windows: \`.msi\` installer" >> $GITHUB_ENV
            echo "- macOS: \`.dmg\` installer" >> $GITHUB_ENV
            echo "- Linux: \`.deb\` package and \`.AppImage\`" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "**Full Changelog**: ${{ github.event.repository.html_url }}/compare/${{ github.event.before }}...${{ github.ref_name }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
  

      - name: Build Tauri
        uses: tauri-apps/tauri-action@v0
        env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              NODE_ENV: production
        with:
              tagName: ${{ github.ref_name }}
              releaseName: 'Dash Desktop ${{ github.ref_name }}'
              releaseBody: ${{ env.RELEASE_NOTES }}
              releaseDraft: false
              prerelease: false